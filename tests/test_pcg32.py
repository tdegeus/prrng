import time
import unittest

import numpy as np
import prrng


class Test_pcg32_basic(unittest.TestCase):
    def test_seed(self):
        seed = int(time.time())

        gen_a = prrng.pcg32(seed)
        a = gen_a.random([100])

        gen_b = prrng.pcg32(seed)
        b = gen_b.random([100])

        self.assertTrue(np.allclose(a, b))

    def test_restore(self):
        seed = int(time.time())
        gen = prrng.pcg32(seed)
        gen.random([123])

        state = gen.state()
        a = gen.random([100])

        gen.restore(state)
        b = gen.random([100])

        self.assertTrue(np.allclose(a, b))

    def test_rowmajor(self):
        seed = int(time.time())
        gen = prrng.pcg32(seed)
        gen.random([123])
        state = gen.state()

        a = gen.random([100, 5, 11])

        gen.restore(state)
        gen.advance(99 * 5 * 11)
        b = gen.random([5, 11])

        self.assertTrue(np.allclose(a[-1, ...], b))

    def test_pcg32_decide(self):
        seed = int(time.time())
        gen = prrng.pcg32(seed)
        p = gen.random([5, 10])

        gen = prrng.pcg32(seed + 1)
        state = gen.state()
        decision = np.empty(p.shape, dtype=bool)
        decision2 = np.empty(p.shape, dtype=bool)
        gen.decide(p, decision)
        gen.decide(p, decision2)

        gen.restore(state)
        self.assertTrue(np.all(np.equal(decision, gen.random(p.shape) <= p)))
        self.assertTrue(np.all(np.equal(decision2, gen.random(p.shape) <= p)))

        p = np.ones_like(p)
        gen.decide(p, decision)
        self.assertTrue(np.all(decision))

        p = np.zeros_like(p)
        gen.decide(p, decision)
        self.assertTrue(not np.any(decision))

    def test_draw(self):
        seed = int(time.time())
        gen = prrng.pcg32()
        shape = [5, 6, 7]

        parameters = {
            prrng.distribution.random: [(0.1, 2.3), gen.random],
            prrng.distribution.delta: [(0.1, 2.3), gen.delta],
            prrng.distribution.exponential: [(0.1, 2.3), gen.exponential],
            prrng.distribution.power: [(0.1, 2.3), gen.power],
            prrng.distribution.pareto: [(1.1, 0.1, 2.3), gen.pareto],
            prrng.distribution.weibull: [(1.1, 0.1, 2.3), gen.weibull],
            prrng.distribution.gamma: [(1.1, 0.1, 2.3), gen.gamma],
            prrng.distribution.normal: [(1.1, 0.1, 2.3), gen.normal],
        }

        for dist, [param, func] in parameters.items():
            if dist != prrng.distribution.delta:
                gen.seed(seed)

            if dist == prrng.distribution.random:
                a = func([]) * param[0] + param[-1]
            else:
                a = func([], *param[:-1]) + param[-1]

            if dist != prrng.distribution.delta:
                gen.seed(seed)

            b = gen.draw(dist, param)

            self.assertAlmostEqual(a, b)

            if dist != prrng.distribution.delta:
                gen.seed(seed)

            if dist == prrng.distribution.random:
                a = func(shape) * param[0] + param[-1]
            else:
                a = func(shape, *param[:-1]) + param[-1]

            if dist != prrng.distribution.delta:
                gen.seed(seed)

            b = gen.draw(shape, dist, param)

            self.assertTrue(np.allclose(a, b))

    def test_pcg32_cumsum(self):
        seed = int(time.time())
        gen = prrng.pcg32()
        n = 10000

        parameters = {
            prrng.distribution.random: [(0.1, 2.3), gen.cumsum_random],
            prrng.distribution.delta: [(0.1, 2.3), gen.cumsum_delta],
            prrng.distribution.exponential: [(0.1, 2.3), gen.cumsum_exponential],
            prrng.distribution.power: [(0.1, 2.3), gen.cumsum_power],
            prrng.distribution.pareto: [(1.1, 0.1, 2.3), gen.cumsum_pareto],
            prrng.distribution.weibull: [(1.1, 0.1, 2.3), gen.cumsum_weibull],
            prrng.distribution.gamma: [(1.1, 0.1, 2.3), gen.cumsum_gamma],
            prrng.distribution.normal: [(1.1, 0.1, 2.3), gen.cumsum_normal],
        }

        for dist, [param, func] in parameters.items():
            if dist != prrng.distribution.delta:
                gen.seed(seed)

            a = np.cumsum(gen.draw([n], dist, param))

            if dist != prrng.distribution.delta:
                gen.seed(seed)

            b = gen.cumsum(n, dist, param)

            if dist != prrng.distribution.delta:
                gen.seed(seed)

            if dist == prrng.distribution.random:
                c = func(n) * param[0] + n * param[-1]
            else:
                c = func(n, *param[:-1]) + n * param[-1]

            self.assertAlmostEqual(a[-1], b)
            self.assertAlmostEqual(a[-1], c)


class Test_pcg32_random(unittest.TestCase):
    """
    Random distribution.
    """

    def test_historic(self):
        gen = prrng.pcg32()

        a = gen.random([100])

        ha = np.array(
            [
                0.108379,
                0.90696,
                0.406692,
                0.875239,
                0.694849,
                0.7435,
                0.167443,
                0.621512,
                0.221678,
                0.895998,
                0.401078,
                0.396606,
                0.346894,
                0.653979,
                0.790445,
                0.884927,
                0.616019,
                0.012579,
                0.377307,
                0.0608,
                0.23995,
                0.1879,
                0.328058,
                0.278146,
                0.879473,
                0.365613,
                0.616987,
                0.199623,
                0.837729,
                0.413446,
                0.807033,
                0.891212,
                0.906384,
                0.284194,
                0.473226,
                0.238198,
                0.333253,
                0.360564,
                0.501208,
                0.389194,
                0.502242,
                0.736847,
                0.713405,
                0.915778,
                0.857983,
                0.056973,
                0.246306,
                0.911259,
                0.940772,
                0.687423,
                0.408766,
                0.074081,
                0.032931,
                0.064742,
                0.001447,
                0.95745,
                0.501345,
                0.813252,
                0.343431,
                0.664789,
                0.829031,
                0.22576,
                0.837668,
                0.307977,
                0.183911,
                0.959587,
                0.170796,
                0.424781,
                0.924418,
                0.933636,
                0.614157,
                0.007682,
                0.703196,
                0.234229,
                0.728257,
                0.975139,
                0.933431,
                0.341162,
                0.756521,
                0.874001,
                0.154687,
                0.351131,
                0.790386,
                0.014452,
                0.213094,
                0.378399,
                0.62506,
                0.680397,
                0.998596,
                0.331519,
                0.03142,
                0.765982,
                0.734759,
                0.719876,
                0.889892,
                0.263362,
                0.989077,
                0.308017,
                0.273916,
                0.766872,
            ]
        )

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4))


class Test_pcg32_delta(unittest.TestCase):
    def test_array(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)
        state = gen.state()
        a = gen.delta([4, 5])
        self.assertTrue(np.allclose(a, np.ones_like(a)))
        self.assertTrue(np.all(np.equal(gen.state(), state)))


class Test_pcg32_exponential(unittest.TestCase):
    """
    Exponential distribution.
    """

    def test_historic(self):
        a = prrng.pcg32().exponential([102])
        b = prrng.pcg32().exponential([102], 2.0)

        ha = np.array(
            [
                [1.14713794e-01, 2.37472711e00, 5.22042264e-01],
                [2.08135211e00, 1.18694941e00, 1.36062718e00],
                [1.83253677e-01, 9.71570105e-01, 2.50614928e-01],
                [2.26334415e00, 5.12623847e-01, 5.05185100e-01],
                [4.26015851e-01, 1.06125450e00, 1.56276964e00],
                [2.16219151e00, 9.57161540e-01, 1.26586110e-02],
                [4.73701551e-01, 6.27266364e-02, 2.74371475e-01],
                [2.08131193e-01, 3.97583830e-01, 3.25932903e-01],
                [2.11588450e00, 4.55095511e-01, 9.59685281e-01],
                [2.22672073e-01, 1.81849039e00, 5.33491248e-01],
                [1.64523355e00, 2.21834998e00, 2.36855459e00],
                [3.34346348e-01, 6.40984073e-01, 2.72068988e-01],
                [4.05343893e-01, 4.47168321e-01, 6.95565652e-01],
                [4.92976361e-01, 6.97642147e-01, 1.33501794e00],
                [1.24968428e00, 2.47429748e00, 1.95181036e00],
                [5.86604354e-02, 2.82769296e-01, 2.42203374e00],
                [2.82636859e00, 1.16290285e00, 5.25544117e-01],
                [7.69687771e-02, 3.34857966e-02, 6.69333183e-02],
                [1.44835274e-03, 3.15707741e00, 6.95841517e-01],
                [1.67799498e00, 4.20727898e-01, 1.09299627e00],
                [1.76627586e00, 2.55873254e-01, 1.81811034e00],
                [3.68136252e-01, 2.03231942e-01, 3.20861095e00],
                [1.87289078e-01, 5.53004121e-01, 2.58253075e00],
                [2.71260417e00, 9.52324825e-01, 7.71120177e-03],
                [1.21468426e00, 2.66872157e-01, 1.30289880e00],
                [3.69443577e00, 2.70952059e00, 4.17277336e-01],
                [1.41272527e00, 2.07148185e00, 1.68047753e-01],
                [4.32524660e-01, 1.56248745e00, 1.45575559e-02],
                [2.39646684e-01, 4.75456748e-01, 9.80990074e-01],
                [1.14067555e00, 6.56838637e00, 4.02747340e-01],
                [3.19237636e-02, 1.45235525e00, 1.32711629e00],
                [1.27252409e00, 2.20629378e00, 3.05658880e-01],
                [4.51692586e00, 3.68193423e-01, 3.20090119e-01],
                [1.45616569e00, 2.13481018e00, 1.03260976e00],
            ]
        ).ravel()

        hb = np.array(
            [
                [2.29427588e-01, 4.74945422e00, 1.04408453e00],
                [4.16270422e00, 2.37389882e00, 2.72125437e00],
                [3.66507354e-01, 1.94314021e00, 5.01229856e-01],
                [4.52668830e00, 1.02524769e00, 1.01037020e00],
                [8.52031703e-01, 2.12250901e00, 3.12553929e00],
                [4.32438303e00, 1.91432308e00, 2.53172220e-02],
                [9.47403101e-01, 1.25453273e-01, 5.48742951e-01],
                [4.16262386e-01, 7.95167660e-01, 6.51865805e-01],
                [4.23176900e00, 9.10191022e-01, 1.91937056e00],
                [4.45344145e-01, 3.63698077e00, 1.06698250e00],
                [3.29046710e00, 4.43669996e00, 4.73710919e00],
                [6.68692697e-01, 1.28196815e00, 5.44137975e-01],
                [8.10687787e-01, 8.94336642e-01, 1.39113130e00],
                [9.85952722e-01, 1.39528429e00, 2.67003588e00],
                [2.49936856e00, 4.94859496e00, 3.90362072e00],
                [1.17320871e-01, 5.65538592e-01, 4.84406748e00],
                [5.65273718e00, 2.32580569e00, 1.05108823e00],
                [1.53937554e-01, 6.69715932e-02, 1.33866637e-01],
                [2.89670548e-03, 6.31415483e00, 1.39168303e00],
                [3.35598995e00, 8.41455796e-01, 2.18599254e00],
                [3.53255171e00, 5.11746508e-01, 3.63622069e00],
                [7.36272505e-01, 4.06463885e-01, 6.41722190e00],
                [3.74578156e-01, 1.10600824e00, 5.16506151e00],
                [5.42520834e00, 1.90464965e00, 1.54224035e-02],
                [2.42936852e00, 5.33744313e-01, 2.60579760e00],
                [7.38887154e00, 5.41904118e00, 8.34554671e-01],
                [2.82545055e00, 4.14296369e00, 3.36095506e-01],
                [8.65049321e-01, 3.12497490e00, 2.91151118e-02],
                [4.79293367e-01, 9.50913495e-01, 1.96198015e00],
                [2.28135110e00, 1.31367727e01, 8.05494680e-01],
                [6.38475272e-02, 2.90471050e00, 2.65423259e00],
                [2.54504819e00, 4.41258756e00, 6.11317761e-01],
                [9.03385173e00, 7.36386846e-01, 6.40180237e-01],
                [2.91233137e00, 4.26962036e00, 2.06521953e00],
            ]
        ).ravel()

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4))
        self.assertTrue(np.allclose(b, hb, 1e-3, 1e-4))


class Test_pcg32_power(unittest.TestCase):
    """
    Power distribution.
    """

    def test_historic(self):
        a = prrng.pcg32().power([102])
        b = prrng.pcg32().power([102], 2.0)

        ha = np.array(
            [
                [0.89162129, 0.09303988, 0.59330762, 0.12476141, 0.30515074, 0.25649985],
                [0.83255693, 0.3784883, 0.77832202, 0.1040021, 0.59892204, 0.60339388],
                [0.65310599, 0.34602145, 0.20955487, 0.11507266, 0.38398126, 0.98742117],
                [0.62269307, 0.93920018, 0.76004968, 0.81210049, 0.67194161, 0.72185362],
                [0.12052664, 0.63438737, 0.38301341, 0.80037727, 0.16227053, 0.58655359],
                [0.19296749, 0.10878846, 0.09361594, 0.71580582, 0.52677379, 0.7618017],
                [0.66674748, 0.63943627, 0.49879223, 0.61080571, 0.49775756, 0.26315345],
                [0.28659527, 0.08422214, 0.14201674, 0.94302693, 0.75369365, 0.08874096],
                [0.05922754, 0.3125775, 0.59123358, 0.92591876, 0.96706865, 0.93525756],
                [0.9985527, 0.04254992, 0.49865465, 0.18674804, 0.65656873, 0.33521061],
                [0.17096852, 0.77424009, 0.16233221, 0.69202289, 0.81608893, 0.04041271],
                [0.829204, 0.57521918, 0.07558248, 0.06636376, 0.38584296, 0.99231845],
                [0.29680371, 0.76577096, 0.27174292, 0.02486148, 0.06656871, 0.65883818],
                [0.24347883, 0.12599893, 0.84531347, 0.64886885, 0.20961402, 0.98554789],
                [0.78690584, 0.62160108, 0.3749397, 0.31960304, 0.00140406, 0.66848098],
                [0.96858042, 0.23401847, 0.26524104, 0.28012367, 0.11010798, 0.73663786],
                [0.01092255, 0.69198332, 0.7260836, 0.23312845, 0.11826704, 0.35607647],
            ]
        ).ravel()

        hb = np.array(
            [
                [0.94425701, 0.30502439, 0.77026464, 0.35321581, 0.5524045, 0.50645815],
                [0.91244558, 0.61521403, 0.88222561, 0.32249357, 0.77390053, 0.77678432],
                [0.80814973, 0.58823588, 0.45777164, 0.33922362, 0.61966221, 0.99369068],
                [0.78910903, 0.96912341, 0.87180828, 0.90116618, 0.81972045, 0.84961969],
                [0.34716946, 0.79648438, 0.61888077, 0.89463807, 0.40282817, 0.76586787],
                [0.43928065, 0.32983096, 0.30596722, 0.84605308, 0.72579183, 0.87281253],
                [0.81654607, 0.79964759, 0.70625224, 0.7815406, 0.70551936, 0.51298485],
                [0.53534593, 0.29021051, 0.37685108, 0.97109574, 0.86815531, 0.29789421],
                [0.2433671, 0.55908631, 0.76891715, 0.96224673, 0.98339649, 0.96708715],
                [0.99927609, 0.20627631, 0.70615483, 0.43214354, 0.81028929, 0.57897375],
                [0.41348339, 0.87990914, 0.40290472, 0.83187913, 0.90337641, 0.20102913],
                [0.91060639, 0.75843206, 0.27492268, 0.25761164, 0.62116259, 0.99615182],
                [0.54479695, 0.8750834, 0.52128967, 0.15767523, 0.25800913, 0.81168847],
                [0.49343574, 0.35496328, 0.9194093, 0.80552396, 0.45783624, 0.99274765],
                [0.88707713, 0.78841682, 0.6123232, 0.56533445, 0.0374708, 0.81760686],
                [0.98416483, 0.48375455, 0.51501557, 0.52926711, 0.33182522, 0.8582761],
                [0.104511, 0.83185535, 0.85210539, 0.48283377, 0.34389975, 0.59672144],
            ]
        ).ravel()

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4))
        self.assertTrue(np.allclose(b, hb, 1e-3, 1e-4))


class Test_pcg32_gamma(unittest.TestCase):
    """
    Gamma distribution.
    """

    def test_historic(self):
        gen = prrng.pcg32()

        a = gen.gamma([100])
        b = gen.gamma([100], 2.0)

        ha = np.array(
            [
                0.114714,
                2.374727,
                0.522042,
                2.081352,
                1.186949,
                1.360627,
                0.183254,
                0.97157,
                0.250615,
                2.263344,
                0.512624,
                0.505185,
                0.426016,
                1.061255,
                1.56277,
                2.162192,
                0.957162,
                0.012659,
                0.473702,
                0.062727,
                0.274371,
                0.208131,
                0.397584,
                0.325933,
                2.115884,
                0.455096,
                0.959685,
                0.222672,
                1.81849,
                0.533491,
                1.645234,
                2.21835,
                2.368555,
                0.334346,
                0.640984,
                0.272069,
                0.405344,
                0.447168,
                0.695566,
                0.492976,
                0.697642,
                1.335018,
                1.249684,
                2.474297,
                1.95181,
                0.05866,
                0.282769,
                2.422034,
                2.826369,
                1.162903,
                0.525544,
                0.076969,
                0.033486,
                0.066933,
                0.001448,
                3.157077,
                0.695842,
                1.677995,
                0.420728,
                1.092996,
                1.766276,
                0.255873,
                1.81811,
                0.368136,
                0.203232,
                3.208611,
                0.187289,
                0.553004,
                2.582531,
                2.712604,
                0.952325,
                0.007711,
                1.214684,
                0.266872,
                1.302899,
                3.694436,
                2.709521,
                0.417277,
                1.412725,
                2.071482,
                0.168048,
                0.432525,
                1.562487,
                0.014558,
                0.239647,
                0.475457,
                0.98099,
                1.140676,
                6.568386,
                0.402747,
                0.031924,
                1.452355,
                1.327116,
                1.272524,
                2.206294,
                0.305659,
                4.516926,
                0.368193,
                0.32009,
                1.456166,
            ]
        )

        hb = np.array(
            [
                3.677594,
                2.193831,
                1.189933,
                3.259955,
                2.774173,
                0.244567,
                0.691339,
                3.241253,
                5.317708,
                0.327136,
                1.410847,
                2.860826,
                2.571036,
                4.377361,
                1.437521,
                2.759383,
                1.543632,
                1.196957,
                0.727017,
                2.213531,
                4.848318,
                0.673109,
                5.263144,
                2.093101,
                0.839113,
                2.503039,
                2.829614,
                2.171181,
                1.792718,
                4.915848,
                4.139267,
                1.008037,
                1.212396,
                4.454944,
                1.010306,
                0.897186,
                0.949301,
                3.49074,
                1.50586,
                0.450735,
                0.276119,
                1.368172,
                1.896513,
                2.824487,
                2.995005,
                1.778297,
                3.578431,
                1.436611,
                0.365437,
                0.135102,
                0.849096,
                1.647663,
                2.174108,
                1.13325,
                2.944705,
                6.250598,
                2.09428,
                1.124407,
                1.44846,
                4.289387,
                0.761357,
                3.498629,
                1.440742,
                2.681273,
                0.57419,
                2.197642,
                3.437052,
                1.916725,
                0.463142,
                3.740866,
                5.805563,
                1.408708,
                0.348523,
                1.079707,
                4.463073,
                1.722601,
                1.275949,
                3.738455,
                4.560554,
                1.220319,
                2.372993,
                0.480228,
                0.311677,
                0.493308,
                1.749779,
                1.907614,
                2.411353,
                0.087015,
                1.545207,
                2.252687,
                2.088011,
                1.774651,
                3.046235,
                1.305294,
                0.71267,
                1.789683,
                5.652095,
                1.021917,
                2.483969,
                2.271504,
            ]
        )

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4) or np.all(np.isnan(ha)))
        self.assertTrue(np.allclose(b, hb, 1e-3, 1e-4) or np.all(np.isnan(hb)))

        if np.all(np.isnan(ha)) and np.all(np.isnan(hb)):
            print("Warning: Compile without Gamma functions, skipping check")


class Test_pcg32_pareto(unittest.TestCase):
    """
    Pareto distribution.
    """

    def test_historic(self):
        a = prrng.pcg32().pareto([102])
        b = prrng.pcg32().pareto([102], 2.0)
        c = prrng.pcg32().pareto([102], 2.0, 2.0)

        ha = np.array(
            [
                [1.1215524, 10.74807972, 1.6854663, 8.01529914, 3.27706895, 3.8986377],
                [1.20111907, 2.64208956, 1.28481524, 9.6151901, 1.6696664, 1.65729226],
                [1.53114505, 2.88999423, 4.77201975, 8.6901614, 2.60429379, 1.01273907],
                [1.60592763, 1.06473574, 1.31570346, 1.23137471, 1.48822455, 1.38532241],
                [8.29692114, 1.57632393, 2.61087465, 1.24941079, 6.16254836, 1.70487407],
                [5.18222008, 9.19215113, 10.68194136, 1.39702692, 1.89834807, 1.31267756],
                [1.49981819, 1.56387751, 2.0048428, 1.63718182, 2.00901017, 3.80006412],
                [3.48924117, 11.87336291, 7.04142355, 1.0604151, 1.32679903, 11.26875376],
                [16.88403648, 3.19920662, 1.69137891, 1.08000835, 1.03405276, 1.06922418],
                [1.0014494, 23.50180937, 2.00539594, 5.35480868, 1.52306979, 2.98319917],
                [5.84903012, 1.29158901, 6.16020678, 1.44503892, 1.22535665, 24.74469073],
                [1.20597586, 1.73846775, 13.23057915, 15.06846528, 2.59172797, 1.00774101],
                [3.36923009, 1.30587349, 3.67994866, 40.2228712, 15.02207207, 1.5178234],
                [4.10713323, 7.9365752, 1.1829931, 1.54114348, 4.7706733, 1.01466403],
                [1.27080008, 1.60874882, 2.66709556, 3.12888136, 712.21965917, 1.49592888],
                [1.03243879, 4.27316704, 3.77015568, 3.56985184, 9.08199407, 1.35751915],
                [91.55371625, 1.44512153, 1.37725187, 4.28948075, 8.45544134, 2.8083855],
            ]
        ).ravel()

        hb = np.array(
            [
                [1.05903371, 3.27842641, 1.2982551, 2.83113036, 1.81026765, 1.97449682],
                [1.09595578, 1.62545057, 1.13349691, 3.100837, 1.29215572, 1.28735864],
                [1.23739446, 1.6999983, 2.18449531, 2.94790797, 1.61378245, 1.00634938],
                [1.267252, 1.03186033, 1.14704118, 1.10967324, 1.21992809, 1.1769972],
                [2.88043766, 1.2555174, 1.61582012, 1.11777046, 2.48244806, 1.30570826],
                [2.27644901, 3.03185605, 3.26832394, 1.18195893, 1.37780553, 1.14572141],
                [1.22467065, 1.25055088, 1.41592471, 1.27952406, 1.41739556, 1.94937532],
                [1.86795106, 3.44577465, 2.65356808, 1.02976458, 1.15186763, 3.35689645],
                [4.10901892, 1.78863261, 1.30053024, 1.0392345, 1.01688385, 1.03403297],
                [1.00072444, 4.84786648, 1.41612003, 2.31404595, 1.23412714, 1.72719402],
                [2.41847682, 1.13648098, 2.48197639, 1.20209771, 1.10695829, 4.97440355],
                [1.09816932, 1.31850967, 3.63738631, 3.88181211, 1.60988446, 1.00386304],
                [1.83554627, 1.14274822, 1.91831923, 6.34215036, 3.87583179, 1.23199976],
                [2.02660633, 2.81719279, 1.08765486, 1.241428, 2.1841871, 1.00730533],
                [1.12729769, 1.26836462, 1.63312448, 1.76886443, 26.68744385, 1.22308172],
                [1.01608995, 2.06716401, 1.94168887, 1.88940516, 3.01363469, 1.16512624],
                [9.56837062, 1.20213208, 1.17356375, 2.07110616, 2.90782416, 1.67582383],
            ]
        ).ravel()

        hc = np.array(
            [
                [2.11806742, 6.55685282, 2.5965102, 5.66226073, 3.62053529, 3.94899364],
                [2.19191155, 3.25090114, 2.26699382, 6.201674, 2.58431144, 2.57471727],
                [2.47478892, 3.3999966, 4.36899062, 5.89581594, 3.2275649, 2.01269876],
                [2.534504, 2.06372066, 2.29408236, 2.21934649, 2.43985618, 2.3539944],
                [5.76087533, 2.51103479, 3.23164023, 2.23554091, 4.96489612, 2.61141653],
                [4.55289801, 6.06371211, 6.53664788, 2.36391786, 2.75561106, 2.29144283],
                [2.44934129, 2.50110177, 2.83184943, 2.55904812, 2.83479112, 3.89875063],
                [3.73590212, 6.89154929, 5.30713616, 2.05952917, 2.30373525, 6.71379289],
                [8.21803784, 3.57726522, 2.60106048, 2.07846901, 2.03376769, 2.06806594],
                [2.00144888, 9.69573295, 2.83224006, 4.62809191, 2.46825428, 3.45438803],
                [4.83695364, 2.27296196, 4.96395277, 2.40419543, 2.21391657, 9.94880711],
                [2.19633864, 2.63701934, 7.27477261, 7.76362423, 3.21976892, 2.00772609],
                [3.67109253, 2.28549643, 3.83663845, 12.68430072, 7.75166358, 2.46399951],
                [4.05321267, 5.63438557, 2.17530973, 2.482856, 4.36837421, 2.01461067],
                [2.25459538, 2.53672925, 3.26624895, 3.53772886, 53.3748877, 2.44616343],
                [2.03217991, 4.13432802, 3.88337774, 3.77881031, 6.02726939, 2.33025248],
                [19.13674123, 2.40426415, 2.3471275, 4.14221233, 5.81564832, 3.35164765],
            ]
        ).ravel()

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4))
        self.assertTrue(np.allclose(b, hb, 1e-3, 1e-4))
        self.assertTrue(np.allclose(c, hc, 1e-3, 1e-4))


class Test_pcg32_weibull(unittest.TestCase):
    """
    Weibull distribution.
    """

    def test_historic(self):
        gen = prrng.pcg32()

        a = gen.weibull([100])
        b = gen.weibull([100], 2.0)

        ha = np.array(
            [
                0.114714,
                2.374727,
                0.522042,
                2.081352,
                1.186949,
                1.360627,
                0.183254,
                0.97157,
                0.250615,
                2.263344,
                0.512624,
                0.505185,
                0.426016,
                1.061255,
                1.56277,
                2.162192,
                0.957162,
                0.012659,
                0.473702,
                0.062727,
                0.274371,
                0.208131,
                0.397584,
                0.325933,
                2.115884,
                0.455096,
                0.959685,
                0.222672,
                1.81849,
                0.533491,
                1.645234,
                2.21835,
                2.368555,
                0.334346,
                0.640984,
                0.272069,
                0.405344,
                0.447168,
                0.695566,
                0.492976,
                0.697642,
                1.335018,
                1.249684,
                2.474297,
                1.95181,
                0.05866,
                0.282769,
                2.422034,
                2.826369,
                1.162903,
                0.525544,
                0.076969,
                0.033486,
                0.066933,
                0.001448,
                3.157077,
                0.695842,
                1.677995,
                0.420728,
                1.092996,
                1.766276,
                0.255873,
                1.81811,
                0.368136,
                0.203232,
                3.208611,
                0.187289,
                0.553004,
                2.582531,
                2.712604,
                0.952325,
                0.007711,
                1.214684,
                0.266872,
                1.302899,
                3.694436,
                2.709521,
                0.417277,
                1.412725,
                2.071482,
                0.168048,
                0.432525,
                1.562487,
                0.014558,
                0.239647,
                0.475457,
                0.98099,
                1.140676,
                6.568386,
                0.402747,
                0.031924,
                1.452355,
                1.327116,
                1.272524,
                2.206294,
                0.305659,
                4.516926,
                0.368193,
                0.32009,
                1.456166,
            ]
        )

        hb = np.array(
            [
                1.461099,
                1.016174,
                0.63723,
                1.345621,
                1.202494,
                0.160559,
                0.407208,
                1.340296,
                1.863961,
                0.21003,
                0.728607,
                1.228798,
                1.139377,
                1.641695,
                0.739283,
                1.197968,
                0.78105,
                0.640222,
                0.424996,
                1.02282,
                1.755609,
                0.398027,
                1.85161,
                0.981798,
                0.479405,
                1.117769,
                1.219365,
                1.008502,
                0.875044,
                1.7715,
                1.581884,
                0.557566,
                0.646777,
                1.66085,
                0.558587,
                0.506768,
                0.530877,
                1.410221,
                0.766308,
                0.280472,
                0.179709,
                0.711375,
                0.912691,
                1.217811,
                1.268842,
                0.869746,
                1.43425,
                0.73892,
                0.232298,
                0.091539,
                0.484148,
                0.820966,
                1.009495,
                0.612865,
                1.253926,
                2.06628,
                0.982204,
                0.609027,
                0.74364,
                1.619779,
                0.441897,
                1.412394,
                0.740567,
                1.173888,
                0.347058,
                1.017462,
                1.395372,
                0.919926,
                0.287325,
                1.478055,
                1.971756,
                0.727748,
                0.222515,
                0.589475,
                1.662847,
                0.849125,
                0.673463,
                1.477411,
                1.68667,
                0.650129,
                1.075729,
                0.296702,
                0.200924,
                0.303833,
                0.85922,
                0.916668,
                1.08823,
                0.059829,
                0.781662,
                1.035956,
                0.980043,
                0.868404,
                1.283919,
                0.685628,
                0.417871,
                0.873931,
                1.93834,
                0.5638,
                1.111664,
                1.042235,
            ]
        )

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4))
        self.assertTrue(np.allclose(b, hb, 1e-3, 1e-4))


class Test_pcg32_normal(unittest.TestCase):
    """
    Normal distribution.
    """

    def test_historic(self):
        a = prrng.pcg32().normal([102])
        b = prrng.pcg32().normal([102], 2.0)
        c = prrng.pcg32().normal([102], 2.0, 2.0)

        ha = np.array(
            [
                [-1.23519642, 1.32226552, -0.23606174, 1.1515092, 0.50964317, 0.654174],
                [-0.96431875, 0.30945346, -0.7665385, 1.25907233, -0.25055791, -0.26214164],
                [-0.39371966, 0.39608421, 0.80796671, 1.1999846, 0.29504106, -2.23897327],
                [-0.31256146, -1.54809412, -0.70646239, -0.88566324, -0.44528089, -0.5883569],
                [1.1723582, -0.34349613, 0.29757597, -0.84296958, 0.985169, -0.21868835],
                [0.86701283, 1.23299688, 1.31881226, -0.57042665, -0.06716238, -0.71211011],
                [-0.43094957, -0.35695237, 0.00302745, -0.2814196, 0.00562099, 0.63365361],
                [0.56335888, 1.37721989, 1.07130241, -1.58070225, -0.68615923, 1.34854886],
                [1.56129108, 0.48855752, -0.23071934, -1.44605251, -1.83935692, -1.51613637],
                [-2.97871394, 1.72183269, 0.00337231, 0.88994379, -0.40311648, 0.42556999],
                [0.9503449, -0.75288369, 0.98491785, -0.50159245, -0.90056034, 1.74591675],
                [-0.95102437, -0.18967778, 1.43542874, 1.50343263, 0.29017034, -2.42370467],
                [0.53361573, -0.72499015, 0.60755019, 1.96233964, 1.50184391, -0.40929437],
                [0.69515581, 1.14551022, -1.01653841, -0.38226839, 0.80776125, -2.18479046],
                [-0.79573114, -0.3096885, 0.3187984, 0.46880912, 2.98799707, -0.43572254],
                [-1.86032782, 0.72567679, 0.62727029, 0.58247416, 1.22595408, -0.63301433],
                [2.29305048, -0.50148, -0.60101079, 0.7285828, 1.18369435, 0.36896617],
            ]
        ).ravel()

        hb = np.array(
            [
                [0.76480358, 3.32226552, 1.76393826, 3.1515092, 2.50964317, 2.654174],
                [1.03568125, 2.30945346, 1.2334615, 3.25907233, 1.74944209, 1.73785836],
                [1.60628034, 2.39608421, 2.80796671, 3.1999846, 2.29504106, -0.23897327],
                [1.68743854, 0.45190588, 1.29353761, 1.11433676, 1.55471911, 1.4116431],
                [3.1723582, 1.65650387, 2.29757597, 1.15703042, 2.985169, 1.78131165],
                [2.86701283, 3.23299688, 3.31881226, 1.42957335, 1.93283762, 1.28788989],
                [1.56905043, 1.64304763, 2.00302745, 1.7185804, 2.00562099, 2.63365361],
                [2.56335888, 3.37721989, 3.07130241, 0.41929775, 1.31384077, 3.34854886],
                [3.56129108, 2.48855752, 1.76928066, 0.55394749, 0.16064308, 0.48386363],
                [-0.97871394, 3.72183269, 2.00337231, 2.88994379, 1.59688352, 2.42556999],
                [2.9503449, 1.24711631, 2.98491785, 1.49840755, 1.09943966, 3.74591675],
                [1.04897563, 1.81032222, 3.43542874, 3.50343263, 2.29017034, -0.42370467],
                [2.53361573, 1.27500985, 2.60755019, 3.96233964, 3.50184391, 1.59070563],
                [2.69515581, 3.14551022, 0.98346159, 1.61773161, 2.80776125, -0.18479046],
                [1.20426886, 1.6903115, 2.3187984, 2.46880912, 4.98799707, 1.56427746],
                [0.13967218, 2.72567679, 2.62727029, 2.58247416, 3.22595408, 1.36698567],
                [4.29305048, 1.49852, 1.39898921, 2.7285828, 3.18369435, 2.36896617],
            ]
        ).ravel()

        hc = np.array(
            [
                [-0.47039285, 4.64453103, 1.52787652, 4.30301839, 3.01928635, 3.30834801],
                [0.0713625, 2.61890692, 0.466923, 4.51814466, 1.49888419, 1.47571672],
                [1.21256067, 2.79216842, 3.61593341, 4.39996919, 2.59008212, -2.47794653],
                [1.37487709, -1.09618825, 0.58707522, 0.22867353, 1.10943822, 0.8232862],
                [4.3447164, 1.31300774, 2.59515194, 0.31406084, 3.97033801, 1.5626233],
                [3.73402566, 4.46599376, 4.63762453, 0.8591467, 1.86567523, 0.57577977],
                [1.13810085, 1.28609526, 2.00605489, 1.43716079, 2.01124198, 3.26730721],
                [3.12671776, 4.75443978, 4.14260483, -1.1614045, 0.62768154, 4.69709773],
                [5.12258217, 2.97711503, 1.53856132, -0.89210502, -1.67871384, -1.03227275],
                [-3.95742788, 5.44366538, 2.00674462, 3.77988757, 1.19376704, 2.85113998],
                [3.9006898, 0.49423262, 3.96983569, 0.99681509, 0.19887933, 5.4918335],
                [0.09795126, 1.62064443, 4.87085747, 5.00686525, 2.58034068, -2.84740934],
                [3.06723145, 0.5500197, 3.21510038, 5.92467929, 5.00368782, 1.18141127],
                [3.39031162, 4.29102044, -0.03307682, 1.23546322, 3.6155225, -2.36958092],
                [0.40853772, 1.38062299, 2.63759679, 2.93761823, 7.97599415, 1.12855491],
                [-1.72065565, 3.45135358, 3.25454058, 3.16494832, 4.45190816, 0.73397134],
                [6.58610095, 0.99704001, 0.79797842, 3.45716561, 4.3673887, 2.73793233],
            ]
        ).ravel()

        self.assertTrue(np.allclose(a, ha, 1e-3, 1e-4))
        self.assertTrue(np.allclose(b, hb, 1e-3, 1e-4))
        self.assertTrue(np.allclose(c, hc, 1e-3, 1e-4))


class Test_pcg32_array(unittest.TestCase):
    def test_basic(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)
        gens = [prrng.pcg32(s) for s in seed.ravel()]
        shape = [5, 6, 4]

        a = gen.random(shape).ravel()

        b = []
        for g in gens:
            b += g.random(shape).ravel().tolist()

        self.assertTrue(np.allclose(a, b))

    def test_list(self):
        seed = np.arange(5)
        gen = prrng.pcg32_array(seed)
        state = gen.state()
        a = gen.random([4, 5])
        b = gen.random([4, 5])
        self.assertTrue(not np.allclose(a, b))

        # test "restore"

        gen.restore(state)
        self.assertTrue(np.allclose(a, gen.random([4, 5])))
        self.assertTrue(not np.allclose(a, gen.random([4, 5])))

        # test "__getitem__"

        for i in range(gen.size()):
            gen[i].restore(state[i])

        self.assertTrue(np.allclose(a, gen.random([4, 5])))
        self.assertTrue(not np.allclose(a, gen.random([4, 5])))

        # test "initstate" and "initseq"

        initstate = gen.initstate()
        initseq = gen.initseq()

        for i in range(gen.size()):
            self.assertTrue(gen[i].initstate() == initstate[i])
            self.assertTrue(gen[i].initseq() == initseq[i])

        for i in range(gen.size()):
            self.assertTrue(gen[i].initstate() == initstate[i])
            self.assertTrue(gen[i].initseq() == initseq[i])

    def test_array(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)
        state = gen.state()
        a = gen.random([4, 5])
        b = gen.random([4, 5])
        self.assertTrue(not np.allclose(a, b))

        # test "restore"

        gen.restore(state)
        self.assertTrue(np.allclose(a, gen.random([4, 5])))
        self.assertTrue(not np.allclose(a, gen.random([4, 5])))

        # test "__getitem__"

        for i in range(gen.size()):
            gen[i].restore(state.ravel()[i])

        self.assertTrue(np.allclose(a, gen.random([4, 5])))
        self.assertTrue(not np.allclose(a, gen.random([4, 5])))

        # test "__getitem__"

        for i in range(gen.shape(0)):
            for j in range(gen.shape(1)):
                gen[i, j].restore(state[i, j])

        self.assertTrue(np.allclose(a, gen.random([4, 5])))
        self.assertTrue(not np.allclose(a, gen.random([4, 5])))

        # test "initstate" and "initseq"

        initstate = gen.initstate()
        initseq = gen.initseq()

        for i in range(gen.shape(0)):
            for j in range(gen.shape(1)):
                self.assertTrue(gen[i, j].initstate() == initstate[i, j])
                self.assertTrue(gen[i, j].initseq() == initseq[i, j])

        for i in range(gen.shape(0)):
            for j in range(gen.shape(1)):
                self.assertTrue(gen[i, j].initstate() == initstate[i, j])
                self.assertTrue(gen[i, j].initseq() == initseq[i, j])

    def test_distance(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)
        regen = prrng.pcg32_array(seed)
        state = gen.state()

        gen.random([4, 5])

        self.assertTrue(np.all(gen.distance(state) == 4 * 5 * np.ones(seed.shape)))
        self.assertTrue(np.all(gen.distance(regen) == 4 * 5 * np.ones(seed.shape)))
        self.assertTrue(np.all(regen.distance(gen) == -4 * 5 * np.ones(seed.shape)))

    def test_decide(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)
        p = gen.random([])
        state = gen.state()

        decision = gen.decide(p)
        decision2 = np.empty_like(decision)
        gen.decide(p, decision2)

        gen.restore(state)
        self.assertTrue(np.all(np.equal(decision, gen.random([]) <= p)))
        self.assertTrue(np.all(np.equal(decision2, gen.random([]) <= p)))

        p = np.ones_like(p)
        gen.decide(p, decision)
        self.assertTrue(np.all(decision))

        p = np.zeros_like(p)
        gen.decide(p, decision)
        self.assertTrue(not np.any(decision))

        mask = np.empty_like(decision)
        gen.decide(0.5 * np.ones_like(p), mask)
        p = gen.random([])
        state = gen.state()

        decision = gen.decide_masked(p, mask)
        self.assertTrue(
            np.all(np.where(mask, np.equal(state, gen.state()), np.not_equal(state, gen.state())))
        )

        gen.decide_masked(p, mask, decision)
        self.assertTrue(
            np.all(np.where(mask, np.equal(state, gen.state()), np.not_equal(state, gen.state())))
        )

    def test_randint(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)

        a = gen.randint([10, 10], 10)
        self.assertTrue(np.all(a < 10))

        high = 1000
        a = gen.randint([100000], high)
        m = np.mean(a)
        self.assertTrue(np.all(a < high))
        self.assertLess((m - (high - 1)) / (high - 1), 1e-3)

        low = 500
        high = 1000
        a = gen.randint([100000], low, high)
        m = np.mean(a)
        c = 0.5 * (high - 1 + low)
        self.assertTrue(np.all(a >= low))
        self.assertTrue(np.all(a < high))
        self.assertLess((m - c) / c, 1e-3)

    def test_cumsum(self):
        seed = np.arange(10).reshape([2, -1])
        gen = prrng.pcg32_array(seed)
        state = gen.state()
        n = int(10000)

        parameters = {
            prrng.distribution.random: [(0.1, 2.3), gen.random, gen.cumsum_random],
            prrng.distribution.delta: [(0.1, 2.3), gen.delta, gen.cumsum_delta],
            prrng.distribution.exponential: [(0.1, 2.3), gen.exponential, gen.cumsum_exponential],
            prrng.distribution.power: [(0.1, 2.3), gen.power, gen.cumsum_power],
            prrng.distribution.pareto: [(1.1, 0.1, 2.3), gen.pareto, gen.cumsum_pareto],
            prrng.distribution.weibull: [(1.1, 0.1, 2.3), gen.weibull, gen.cumsum_weibull],
            prrng.distribution.gamma: [(1.1, 0.1, 2.3), gen.gamma, gen.cumsum_gamma],
            prrng.distribution.normal: [(1.1, 0.1, 2.3), gen.normal, gen.cumsum_normal],
        }

        for dist, [param, draw, cumsum] in parameters.items():
            if dist != prrng.distribution.delta:
                gen.restore(state)

            if dist == prrng.distribution.random:
                a = np.cumsum(draw([n]) * param[0] + param[-1], axis=-1)[..., -1]
            else:
                a = np.cumsum(draw([n], *param[:-1]) + param[-1], axis=-1)[..., -1]

            if dist != prrng.distribution.delta:
                gen.restore(state)

            if dist == prrng.distribution.random:
                b = cumsum(n * np.ones(state.shape, dtype=int)) * param[0] + n * param[-1]
            else:
                b = cumsum(n * np.ones(state.shape, dtype=int), *param[:-1]) + n * param[-1]

            self.assertTrue(np.allclose(a, b))


if __name__ == "__main__":
    unittest.main()
